import json
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup
import hashlib

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as file:
    config = json.load(file)
    TOKEN = config['TOKEN']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# URL-–∞–¥—Ä–µ—Å –ø–æ–∏—Å–∫–∞
SEARCH_URL_LORDSERIAL = 'https://lordserial.run/index.php?do=search'
SEARCH_URL_BEFILM1 = 'https://t1.befilm1.life/index.php?do=search'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
search_results_cache = {}
favorite_movies_cache = {}  # –≠—Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection():
    conn = sqlite3.connect('favorites.db')
    conn.row_factory = sqlite3.Row
    return conn

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def create_tables():
    conn = get_db_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS user_favorites (
            chat_id INTEGER,
            title TEXT,
            url TEXT,
            player_url TEXT,
            PRIMARY KEY (chat_id, title)
        )
    ''')
    conn.close()

create_tables()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_page(url, params=None):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ URL: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
    response = requests.get(url, params=params)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.text[:200]}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    return response.text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def parse_search_results_lordserial(content):
    soup = BeautifulSoup(content, 'html.parser')
    results = []
    for item in soup.find_all('div', class_='th-item'):
        title = item.find('div', class_='th-title').get_text(strip=True)
        link = item.find('a', class_='th-in with-mask')['href']
        results.append((f"{title} (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)", link))
    return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞ befilm1
def parse_search_results_befilm1(content):
    soup = BeautifulSoup(content, 'html.parser')
    results = []
    for item in soup.find_all('div', class_='th-item'):
        title = item.find('div', class_='th-title').get_text(strip=True)
        link = item.find('a', class_='th-in with-mask')['href']
        results.append((f"{title} (–ò—Å—Ç–æ—á–Ω–∏–∫ 2)", link))
    return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
def extract_movie_info(movie_page_content):
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    title = soup.find('h1').get_text(strip=True)
    description = soup.find('div', class_='fdesc').get_text(strip=True)
    return {
        'title': title,
        'description': description,
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–µ—Ä
def extract_player_link(movie_page_content):
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    logger.info(
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–µ–µ—Ä–∞:\n" + movie_page_content[:1000])  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ iframe
    iframe = soup.find('iframe')
    if iframe and 'src' in iframe.attrs:
        logger.info("–ù–∞–π–¥–µ–Ω iframe: " + iframe['src'])
        return iframe['src']

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ div —Å –∫–ª–∞—Å—Å–æ–º 'player-container'
    player_div = soup.find('div', class_='player-container')
    if player_div:
        player_link = player_div.find('a')
        if player_link and 'href' in player_link.attrs:
            logger.info("–ù–∞–π–¥–µ–Ω player_link: " + player_link['href'])
            return player_link['href']

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–µ–º None
    logger.info("–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
logging.basicConfig(level=logging.ERROR)

def get_search_results(search_term):
    try:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        params_lordserial = {'do': 'search', 'subaction': 'search', 'story': search_term}
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        params_befilm1 = {'story': search_term}

        # –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        search_content_lordserial = get_page(SEARCH_URL_LORDSERIAL, params=params_lordserial)
        results_lordserial = parse_search_results_lordserial(search_content_lordserial)

        # –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        search_content_befilm1 = get_page(SEARCH_URL_BEFILM1, params=params_befilm1)
        results_befilm1 = parse_search_results_befilm1(search_content_befilm1)

        # –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–µ—Ä–Ω–∏—Ç–µ
        return results_lordserial + results_befilm1

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def build_keyboard(results, current_page, total_pages):
    keyboard = []
    start_index = (current_page - 1) * 5
    end_index = start_index + 5
    paginated_results = results[start_index:end_index]

    for idx, (title, _) in enumerate(paginated_results):
        keyboard.append([InlineKeyboardButton(title, callback_data=f"movie_{start_index + idx}")])

    if current_page > 1:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f'prev_{current_page - 1}')])
    if current_page < total_pages:
        keyboard.append([InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f'next_{current_page + 1}')])

    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def build_favorites_keyboard():
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data='home')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_unique_id(url):
    return hashlib.md5(url.encode()).hexdigest()[:10]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∏–ª—å–º–∞
def build_movie_keyboard(movie_url, is_favorite=False):
    unique_id = get_unique_id(movie_url)
    keyboard = []

    if is_favorite:
        keyboard.append([InlineKeyboardButton("‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", callback_data='none')])
    else:
        keyboard.append([InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{unique_id}")])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ú–û–¢–†–ï–¢–¨ –§–ò–õ–¨–ú" –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–µ—Ä –µ—Å—Ç—å
    if movie_url:
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º", url=movie_url)])

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data='home')])

    return InlineKeyboardMarkup(keyboard)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start')
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data='search')],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç –∫–∞–Ω–∞–ª–∞ <b>48/91</b> (https://t.me/tommorow4891)! üé¨\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫' –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        chat_id = update.message.chat_id
    else:
        chat_id = update.callback_query.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
def get_user_favorites(chat_id):
    conn = get_db_connection()
    cursor = conn.execute('SELECT title, url, player_url FROM user_favorites WHERE chat_id = ?', (chat_id,))
    favorites = cursor.fetchall()
    conn.close()
    return {'favorites': [row['title'] for row in favorites], 'links': {row['title']: row['player_url'] for row in favorites}}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º player_url

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
    if data == 'search':
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    elif data == 'favorites':
        chat_id = update.callback_query.message.chat_id
        user_favorites = get_user_favorites(chat_id)

        if not user_favorites['favorites']:
            await query.edit_message_text(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ì–ª–∞–≤–Ω–∞—è' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        else:
            favorites_text = "\n".join([f"{idx + 1}. {title}" for idx, title in enumerate(user_favorites['favorites'])])
            reply_markup = build_favorites_keyboard()
            await query.edit_message_text(
                text=f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n{favorites_text}",
                reply_markup=reply_markup
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞
    elif data.startswith('movie_'):
        index = int(data.split('_')[1])
        search_results = search_results_cache.get('results', [])
        movie_url = search_results[index][1]
        movie_page_content = get_page(movie_url)
        movie_info = extract_movie_info(movie_page_content)
        player_link = extract_player_link(movie_page_content)

        if player_link:
            keyboard = build_movie_keyboard(player_link, is_favorite=False)
            await query.edit_message_text(
                text=f"<b>{movie_info['title']}</b>\n\n{movie_info['description']}",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                text=f"<b>{movie_info['title']}</b>\n\n{movie_info['description']}\n\nüõë –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode='HTML'
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
    elif data.startswith('favorite_'):
        unique_id = data.split('_')[1]
        chat_id = update.callback_query.message.chat_id

        # –ù–∞–π—Ç–∏ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        for title, url in search_results_cache.get('results', []):
            if get_unique_id(url) == unique_id:
                player_url = extract_player_link(get_page(url))
                if player_url:
                    conn = get_db_connection()
                    conn.execute('INSERT OR REPLACE INTO user_favorites (chat_id, title, url, player_url) VALUES (?, ?, ?, ?)',
                                 (chat_id, title, url, player_url))
                    conn.commit()
                    conn.close()
                    await query.edit_message_text(text="–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.", parse_mode='HTML')
                else:
                    await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–µ—Ä.", parse_mode='HTML')
                break

    elif data == 'home':
        await start(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    elif data.startswith('prev_') or data.startswith('next_'):
        current_page = int(data.split('_')[1])
        search_term = search_results_cache.get('search_term', '')
        search_results = get_search_results(search_term)
        search_results_cache['results'] = search_results
        total_pages = (len(search_results) + 4) // 5
        reply_markup = build_keyboard(search_results, current_page, total_pages)
        await query.edit_message_text(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id

    if text:
        search_results = get_search_results(text)
        search_results_cache['results'] = search_results
        search_results_cache['search_term'] = text

        total_pages = (len(search_results) + 4) // 5
        reply_markup = build_keyboard(search_results, 1, total_pages)
        await update.message.reply_text(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()

if __name__ == '__main__':
    main()
