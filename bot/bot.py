import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7287010414:AAGpZ0dlH6_0xns8Bq7rWxMjK_E9zG9w1nY'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# URL-–∞–¥—Ä–µ—Å –ø–æ–∏—Å–∫–∞
SEARCH_URL = 'https://w140.zona.plus/search-form'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_page(url):
    response = requests.get(url)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    return response.text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def get_search_results(search_term):
    search_url = f'{SEARCH_URL}?query={search_term}'
    search_content = get_page(search_url)
    return parse_search_results(search_content)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def parse_search_results(content):
    soup = BeautifulSoup(content, 'html.parser')
    results = []

    for item in soup.find_all('li', class_='results-item-wrap'):
        title = item.find('div', class_='results-item-title').get_text(strip=True)
        link = item.find('a', class_='results-item')['href']
        results.append((title, link))

    return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–µ—Ä
def extract_player_link(movie_page_content):
    soup = BeautifulSoup(movie_page_content, 'html.parser')

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.debug('HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞:\n' + soup.prettify())

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ <link itemprop="embedUrl">
    embed_url = soup.find('link', itemprop='embedUrl')
    if embed_url:
        src = embed_url.get('href')
        if src:
            logger.debug(f'–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ <link itemprop="embedUrl">: {src}')
            return src

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞
    movie_url = soup.find('link', itemprop='url')
    if movie_url:
        src = movie_url.get('href')
        if src:
            logger.debug(f'–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞ –≤ <link itemprop="url">: {src}')
            return src

    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def build_keyboard(results):
    keyboard = []
    for idx, (title, _) in enumerate(results):
        keyboard.append([InlineKeyboardButton(title, callback_data=f"movie_{idx}")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    return InlineKeyboardMarkup(keyboard)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
search_results_cache = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start')
    keyboard = [[InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data='search')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤! üé¨\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n"
        "1. –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤:\n"
        "- –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "- –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ.\n"
        "- –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.\n\n"
        "2. –í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞:\n"
        "- –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å–º, –Ω–∞–∂–∞–≤ –Ω–∞ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n"
        "- –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–µ—Ä, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º.\n\n"
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∏—Å–∫"')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')

    if data == 'search':
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫"')
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è')
    elif data == 'back':
        await query.edit_message_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–æ–≤.',
                                      reply_markup=InlineKeyboardMarkup(
                                          [[InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data='search')]]))
    elif data.startswith('movie_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å–º–∞
        index = int(data.split('_')[1])
        logger.info(f'–í—ã–±—Ä–∞–Ω —Ñ–∏–ª—å–º —Å –∏–Ω–¥–µ–∫—Å–æ–º: {index}')
        results = search_results_cache.get('results', [])
        if 0 <= index < len(results):
            title, movie_url = results[index]
            movie_page_url = f'https://w140.zona.plus{movie_url}'
            movie_page_content = get_page(movie_page_url)
            player_url = extract_player_link(movie_page_content)
            if player_url:
                await query.edit_message_text(f"–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º –∑–¥–µ—Å—å: {player_url}")
            else:
                await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞.")
        else:
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞.")
            logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ñ–∏–ª—å–º–∞: {index}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤: {len(results)}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    search_term = update.message.text
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫: {search_term}')

    search_results = get_search_results(search_term)
    search_results_cache['results'] = search_results

    logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞')

    if not search_results:
        await update.message.reply_text('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')
    else:
        reply_markup = build_keyboard(search_results)
        await update.message.reply_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    application.run_polling()

if __name__ == '__main__':
    main()
