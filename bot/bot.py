import json
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup
import hashlib

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r', encoding='utf-8') as file:
    config = json.load(file)
    TOKEN = config['TOKEN']


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# URL-–∞–¥—Ä–µ—Å–∞ –ø–æ–∏—Å–∫–∞
SEARCH_URL_LORDSERIAL = 'https://lordserial.run/index.php?do=search'
SEARCH_URL_GOODFILMS = 'https://zhqpg.goodfilms.fun/index.php?do=search'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
search_results_cache = {}


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection():
    conn = sqlite3.connect('favorites.db')
    conn.row_factory = sqlite3.Row
    return conn


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def create_tables():
    conn = get_db_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS user_favorites (
            chat_id INTEGER,
            title TEXT,
            url TEXT,
            player_url TEXT,
            PRIMARY KEY (chat_id, title)
        )
    ''')
    conn.close()


create_tables()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_page(url, params=None):
    response = requests.get(url, params=params)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ HTML-–∫–æ–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug(f'HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.text[:1000]}')
    return response.text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞ lordserial
def get_search_results_lordserial(search_term):
    params_lordserial = {'do': 'search', 'subaction': 'search', 'story': search_term}
    search_content_lordserial = get_page(SEARCH_URL_LORDSERIAL, params=params_lordserial)
    return parse_search_results_lordserial(search_content_lordserial)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞ lordserial
def parse_search_results_lordserial(content):
    soup = BeautifulSoup(content, 'html.parser')
    results = []
    for item in soup.find_all('div', class_='th-item'):
        title = item.find('div', class_='th-title').get_text(strip=True)
        link = item.find('a', class_='th-in with-mask')['href']
        results.append((f"{title} (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)", link))
    return results


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞ goodfilms
def get_search_results_goodfilms(search_term):
    params_goodfilms = {
        'do': 'search',
        'subaction': 'search',
        'story': search_term,
        'result_from': 1
    }
    search_content_goodfilms = requests.post(SEARCH_URL_GOODFILMS, data=params_goodfilms).text
    return parse_search_results_goodfilms(search_content_goodfilms)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞ goodfilms
def parse_search_results_goodfilms(content):
    soup = BeautifulSoup(content, 'html.parser')
    results = []
    for item in soup.find_all('div', class_='poster'):
        title = item.find('span', class_='poster__title').get_text(strip=True)
        link = item.find('a', class_='poster__link')['href']
        results.append((f"{title} (–ò—Å—Ç–æ—á–Ω–∏–∫ 2)", link))
    return results


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
def get_search_results(search_term):
    results_lordserial = get_search_results_lordserial(search_term)
    results_goodfilms = get_search_results_goodfilms(search_term)
    return results_lordserial + results_goodfilms


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
def extract_movie_info(movie_page_content, source):
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    title = soup.find('h1')

    if source == 'goodfilms':
        description_div = soup.find('div', class_='pmovie__descr')
        description = description_div.find('div', class_='pmovie__text full-text clearfix') if description_div else None
        description_text = description.get_text(strip=True) if description else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    else:
        description_div = soup.find('div', class_='fdesc')
        description_text = description_div.get_text(strip=True) if description_div else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    title_text = title.get_text(strip=True) if title else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    return {
        'title': title_text,
        'description': description_text,
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–µ—Ä
def extract_player_link(movie_page_content):
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    iframe = soup.find('iframe')
    if iframe:
        src = iframe['src']
        if src.startswith('//'):
            src = 'https:' + src
        return src

    player_div = soup.find('div', class_='player-container')
    if player_div:
        player_link = player_div.find('a')
        if player_link and 'href' in player_link.attrs:
            href = player_link['href']
            if href.startswith('//'):
                href = 'https:' + href
            return href

    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def build_keyboard(results, current_page, total_pages):
    keyboard = []
    start_index = (current_page - 1) * 5
    end_index = start_index + 5
    paginated_results = results[start_index:end_index]

    for idx, (title, _) in enumerate(paginated_results):
        keyboard.append([InlineKeyboardButton(title, callback_data=f"movie_{start_index + idx}")])

    if current_page > 1:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f'prev_{current_page - 1}')])
    if current_page < total_pages:
        keyboard.append([InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f'next_{current_page + 1}')])

    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def build_favorites_keyboard():
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data='home')]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_unique_id(url):
    return hashlib.md5(url.encode()).hexdigest()[:10]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∏–ª—å–º–∞
def build_movie_keyboard(movie_url, player_url, is_favorite=False):
    unique_id = get_unique_id(movie_url)
    keyboard = []

    if player_url:
        logger.debug(f'Player URL: {player_url}')
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –°–ú–û–¢–†–ï–¢–¨", url=player_url)])
    else:
        keyboard.append([InlineKeyboardButton("‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω –ø–ª–µ–µ—Ä", callback_data='none')])

    if is_favorite:
        keyboard.append([InlineKeyboardButton("‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", callback_data='none')])
    else:
        keyboard.append([InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{unique_id}")])

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data='home')])

    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_favorites(chat_id):
    conn = get_db_connection()
    cursor = conn.execute('SELECT title, player_url FROM user_favorites WHERE chat_id = ?', (chat_id,))
    favorites = cursor.fetchall()
    conn.close()
    return {'favorites': [row['title'] for row in favorites],
            'links': {row['title']: row['player_url'] for row in favorites}}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º player_url


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start')
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data='search')],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
        [InlineKeyboardButton("üëæ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –Ω–∞ Github", url='https://github.com/dantemorrigan/48-91KINO_bot')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç –∫–∞–Ω–∞–ª–∞ <b>48/91</b> (https://t.me/tommorow4891)! üé¨\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫' –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        chat_id = update.message.chat_id
    else:
        chat_id = update.callback_query.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å–º–∞
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')

    if data == 'search':
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    elif data == 'favorites':
        chat_id = update.callback_query.message.chat_id
        user_favorites = get_user_favorites(chat_id)

        if not user_favorites['favorites']:
            await query.edit_message_text('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –ø—É—Å—Ç—ã.', reply_markup=build_favorites_keyboard())
        else:
            favorites_message = '\n'.join([f"{idx + 1}. <a href='{user_favorites['links'][title]}'>{title}</a>"
                                           for idx, title in enumerate(user_favorites['favorites'])])
            await query.edit_message_text(f'–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n{favorites_message}', parse_mode='HTML',
                                          reply_markup=build_favorites_keyboard())

    elif data.startswith('movie_'):
        index = int(data.split('_')[1])
        results = search_results_cache.get('results', [])
        if 0 <= index < len(results):
            title, movie_url = results[index]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            source = 'goodfilms' if '–ò—Å—Ç–æ—á–Ω–∏–∫ 2' in title else 'lordserial'
            movie_page_content = get_page(movie_url)
            movie_info = extract_movie_info(movie_page_content, source)
            player_url = extract_player_link(movie_page_content)

            chat_id = update.callback_query.message.chat_id
            conn = get_db_connection()
            cursor = conn.execute('SELECT 1 FROM user_favorites WHERE chat_id = ? AND url = ?', (chat_id, movie_url))
            is_favorite = cursor.fetchone() is not None
            conn.close()

            response_message = (
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {movie_info['title']}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{movie_info['description']}</i>\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

            await query.edit_message_text(
                text=response_message,
                parse_mode='HTML',
                reply_markup=build_movie_keyboard(movie_url, player_url, is_favorite)
            )

    elif data.startswith('favorite_'):
        unique_id = data.split('_')[1]
        movie_url = search_results_cache.get('url_map', {}).get(unique_id, '')
        chat_id = update.callback_query.message.chat_id

        if movie_url:
            movie_page_content = get_page(movie_url)
            player_url = extract_player_link(movie_page_content)

            if player_url:
                movie_info = extract_movie_info(movie_page_content,
                                                'goodfilms')  # –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫

                conn = get_db_connection()
                conn.execute('''INSERT OR IGNORE INTO user_favorites (chat_id, title, url, player_url)
                                VALUES (?, ?, ?, ?)''', (chat_id, movie_info['title'], movie_url, player_url))
                conn.commit()
                conn.close()

                await query.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.", show_alert=True)
                await query.edit_message_reply_markup(reply_markup=build_movie_keyboard(movie_url, player_url, True))

        else:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

    elif data == 'home':
        await start(update, context)

    elif data.startswith('next_') or data.startswith('prev_'):
        current_page = int(data.split('_')[1])
        results = search_results_cache.get('results', [])
        total_pages = search_results_cache.get('total_pages', 1)
        await query.edit_message_reply_markup(reply_markup=build_keyboard(results, current_page, total_pages))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∏—Å–∫)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    search_term = update.message.text
    chat_id = update.message.chat_id

    results = get_search_results(search_term)
    search_results_cache['results'] = results
    search_results_cache['url_map'] = {get_unique_id(url): url for _, url in results}

    total_pages = (len(results) + 4) // 5
    search_results_cache['total_pages'] = total_pages

    if not results:
        await context.bot.send_message(chat_id=chat_id, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await context.bot.send_message(chat_id=chat_id, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
                                       reply_markup=build_keyboard(results, current_page=1, total_pages=total_pages))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', exc_info=context.error)


if __name__ == '__main__':
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error)

    application.run_polling()
