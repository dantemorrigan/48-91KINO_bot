import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup
import hashlib

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as file:
    config = json.load(file)
    TOKEN = config['TOKEN']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# URL-–∞–¥—Ä–µ—Å –ø–æ–∏—Å–∫–∞
SEARCH_URL_LORDSERIAL = 'https://lordserial.run/index.php?do=search'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
search_results_cache = {}
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
favorite_movies_cache = {}  # –°–ª–æ–≤–∞—Ä—å: {chat_id: {favorites: [], links: {}, covers: {}}}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_page(url, params=None):
    response = requests.get(url, params=params)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    return response.text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def parse_search_results(content):
    soup = BeautifulSoup(content, 'html.parser')
    results = []
    for item in soup.find_all('div', class_='th-item'):
        title = item.find('div', class_='th-title').get_text(strip=True)
        link = item.find('a', class_='th-in with-mask')['href']
        results.append((f"{title} (–ò—Å—Ç–æ—á–Ω–∏–∫ 1)", link))
    return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
def extract_movie_info(movie_page_content):
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    title = soup.find('h1').get_text(strip=True)
    description = soup.find('div', class_='fdesc').get_text(strip=True)
    return {
        'title': title,
        'description': description,
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–µ—Ä
def extract_player_link(movie_page_content):
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    iframe = soup.find('iframe')
    if iframe:
        return iframe['src']
    player_div = soup.find('div', class_='player-container')
    if player_div:
        player_link = player_div.find('a')
        if player_link and 'href' in player_link.attrs:
            return player_link['href']
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def get_search_results(search_term):
    params_lordserial = {'do': 'search', 'subaction': 'search', 'story': search_term}
    search_content_lordserial = get_page(SEARCH_URL_LORDSERIAL, params=params_lordserial)
    results_lordserial = parse_search_results(search_content_lordserial)
    return results_lordserial

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def build_keyboard(results, current_page, total_pages):
    keyboard = []
    start_index = (current_page - 1) * 5
    end_index = start_index + 5
    paginated_results = results[start_index:end_index]

    for idx, (title, _) in enumerate(paginated_results):
        keyboard.append([InlineKeyboardButton(title, callback_data=f"movie_{start_index + idx}")])

    if current_page > 1:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f'prev_{current_page - 1}')])
    if current_page < total_pages:
        keyboard.append([InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f'next_{current_page + 1}')])

    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def build_favorites_keyboard():
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data='home')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_unique_id(url):
    return hashlib.md5(url.encode()).hexdigest()[:10]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∏–ª—å–º–∞
def build_movie_keyboard(movie_url):
    unique_id = get_unique_id(movie_url)
    keyboard = [
        [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{unique_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data='home')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start')
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data='search')],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_message = (
        "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç –∫–∞–Ω–∞–ª–∞ <b>48/91</b> (https://t.me/tommorow4891)! üé¨\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫' –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        chat_id = update.message.chat_id
    else:
        chat_id = update.callback_query.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
def get_user_favorites(chat_id):
    if chat_id not in favorite_movies_cache:
        favorite_movies_cache[chat_id] = {'favorites': [], 'links': {}, 'covers': {}}
    return favorite_movies_cache[chat_id]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
    if data == 'search':
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
    elif data == 'favorites':
        chat_id = update.callback_query.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_favorites = get_user_favorites(chat_id)

        if not user_favorites['favorites']:
            await query.edit_message_text('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –ø—É—Å—Ç—ã.', reply_markup=build_favorites_keyboard())
        else:
            favorites_message = '\n'.join([f"{idx + 1}. <a href='{user_favorites['links'][title]}'>{title}</a>"
                                           for idx, title in enumerate(user_favorites['favorites'])])
            await query.edit_message_text(f'–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n{favorites_message}', parse_mode='HTML',
                                          reply_markup=build_favorites_keyboard())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
    elif data.startswith('movie_'):
        index = int(data.split('_')[1])
        results = search_results_cache.get('results', [])
        if 0 <= index < len(results):
            title, movie_url = results[index]
            movie_page_content = get_page(movie_url)
            movie_info = extract_movie_info(movie_page_content)
            player_url = extract_player_link(movie_page_content)

            response_message = (
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {movie_info['title']}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{movie_info['description']}</i>\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

            if player_url:
                response_message += f"<b><a href='{player_url}'>–°–ú–û–¢–†–ï–¢–¨ –§–ò–õ–¨–ú –ó–î–ï–°–¨</a></b>"
            else:
                response_message += "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞."

            reply_markup = build_movie_keyboard(movie_url)
            await query.edit_message_text(response_message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞.", reply_markup=build_favorites_keyboard())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    elif data.startswith('next_'):
        page = int(data.split('_')[1])
        total_results = search_results_cache['total_results']
        total_pages = (total_results // 5) + (1 if total_results % 5 > 0 else 0)

        results = search_results_cache.get('results', [])
        reply_markup = build_keyboard(results, page, total_pages)
        await query.edit_message_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    elif data.startswith('prev_'):
        page = int(data.split('_')[1])
        total_results = search_results_cache['total_results']
        total_pages = (total_results // 5) + (1 if total_results % 5 > 0 else 0)

        results = search_results_cache.get('results', [])
        reply_markup = build_keyboard(results, page, total_pages)
        await query.edit_message_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    elif data.startswith('favorite_'):
        unique_id = data.split('_')[1]
        chat_id = update.callback_query.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_favorites = get_user_favorites(chat_id)

        original_url = find_original_url_by_id(unique_id)
        if original_url:
            movie_page_content = get_page(original_url)
            movie_info = extract_movie_info(movie_page_content)
            player_url = extract_player_link(movie_page_content)
            cover_image = extract_cover_image(movie_page_content)

            if movie_info['title'] not in user_favorites['favorites']:
                user_favorites['favorites'].append(movie_info['title'])
                user_favorites['links'][movie_info['title']] = player_url
                user_favorites['covers'][movie_info['title']] = cover_image
                update_favorites_cache()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await query.edit_message_text(f"{movie_info['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                                              reply_markup=build_favorites_keyboard())
            else:
                await query.edit_message_text(f"{movie_info['title']} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.",
                                              reply_markup=build_favorites_keyboard())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–∞—è"
    elif data == 'home':
        await start(update, context)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
FAVORITES_FILE = 'favorites.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞
def load_favorites():
    try:
        with open(FAVORITES_FILE, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {'favorites': [], 'links': {}, 'covers': {}}
    except json.JSONDecodeError:
        return {'favorites': [], 'links': {}, 'covers': {}}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ —Ñ–∞–π–ª
def save_favorites(data):
    with open(FAVORITES_FILE, 'w') as file:
        json.dump(data, file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
favorite_movies_cache = load_favorites()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def update_favorites_cache():
    save_favorites(favorite_movies_cache)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±–ª–æ–∂–µ–∫
def extract_cover_image(movie_page_content):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ —Ñ–∏–ª—å–º–∞ –∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞.
    """
    soup = BeautifulSoup(movie_page_content, 'html.parser')
    cover_image_tag = soup.find('div', class_='th-img img-resp-vert')
    if cover_image_tag:
        img_tag = cover_image_tag.find('img')
        if img_tag:
            return img_tag['src']
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
def find_original_url_by_id(unique_id):
    for title, url in search_results_cache.get('results', []):
        if get_unique_id(url) == unique_id:
            return url
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    search_term = update.message.text
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫: {search_term}')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–∏—Å–∫–∞
    search_message = await update.message.reply_text('üîç –ü–æ–∏—Å–∫‚Ä¶')

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞ LordSerial
    search_results = get_search_results(search_term)
    search_results_cache['results'] = search_results  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à
    search_results_cache['search_term'] = search_term  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    search_results_cache['total_results'] = len(search_results)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞')

    if not search_results:
        await search_message.edit_text('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')
    else:
        total_pages = (len(search_results) // 5) + (1 if len(search_results) % 5 > 0 else 0)
        reply_markup = build_keyboard(search_results, 1, total_pages)  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        await search_message.edit_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global favorite_movies_cache
    favorite_movies_cache = load_favorites()  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    application.run_polling()

if __name__ == '__main__':
    main()
